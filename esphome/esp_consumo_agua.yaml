esphome:
  name: manejo_contadores
  on_boot:
    priority: -10
    then:
      - output.set_level:
          id: val_01
          level: 0.2
      - output.set_level:
          id: val_02
          level: 0.2
      - output.set_level:
          id: val_03
          level: 0.2
      - output.set_level:
          id: val_04
          level: 0.2

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

ota:
  password: ""

wifi:
  ssid: "udcdocencia"
  password: "Universidade.2223"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP32_Manejo_Contadores"
    password: "123456789"

captive_portal:

web_server:
  port: 80

globals:
  - id: volumen_01
    type: float
    restore_value: yes
    initial_value: "0"
  - id: volumen_01_anterior
    type: float
    restore_value: no
    initial_value: "0"
  - id: volumen_02
    type: float
    restore_value: yes
    initial_value: "0"
  - id: volumen_02_anterior
    type: float
    restore_value: no
    initial_value: "0"

sensor:
  # Contador 01
  - platform: pulse_counter
    id: contador_01
    pin:
      number: 32
      mode:
        input: true
    name: "Flujo Nº 01"
    update_interval: 2s
    unit_of_measurement: "L/min"
    state_topic: "contador/01/flujo"
    filters:
      - lambda: |-
          return float(x / 660);
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    total:
      name: "Volumen Nº 01"
      unit_of_measurement: "L"
      state_topic: "contador/01/volumenPuntual"
      accuracy_decimals: 2
      filters:
        - lambda: |-
            return float(x / 660);
      on_value:
        then:
          - lambda: |-
              float dif = x - id(volumen_01_anterior);
              id(volumen_01_anterior) = x;
              id(volumen_01) += dif;

  # Contador 02
  - platform: pulse_counter
    id: contador_02
    pin:
      number: 33
      mode:
        input: true
    name: "Flujo Nº 02"
    update_interval: 2s
    unit_of_measurement: "L/min"
    state_topic: "contador/02/flujo"
    filters:
      - lambda: |-
          return float(x / 660);
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    total:
      name: "Volumen Nº 02"
      unit_of_measurement: "L"
      state_topic: "contador/02/volumenPuntual"
      accuracy_decimals: 2
      filters:
        - lambda: |-
            return float(x / 660);
      on_value:
        then:
          - lambda: |-
              float dif = x - id(volumen_02_anterior);
              id(volumen_02_anterior) = x;
              id(volumen_02) += dif;

output:
  # Valvula 01
  - platform: ledc
    pin: 0
    id: val_01
    frequency: 1000 Hz

  # Valvula 02
  - platform: ledc
    pin: 4
    id: val_02
    frequency: 1000 Hz

  # Valvula 03
  - platform: ledc
    pin: 2
    id: val_03
    frequency: 1000 Hz

  # Valvula 04
  - platform: ledc
    pin: 15
    id: val_04
    frequency: 1000 Hz

mqtt:
  broker: 10.20.31.223
  port: 1883
  client_id: "ESP32"
  log_topic: null
  on_message:
    - topic: "valvula/01/valor"
      then:
        - lambda: |-
            auto level = strtof(x.c_str(), nullptr) * 0.8 / 100.0 + 0.2;
            id(val_01).set_level(level);
    - topic: "contador/01/reset"
      then:
        - lambda: |-
            id(volumen_01) = 0;
            id(volumen_01_anterior) = 0;
            id(contador_01).set_total_pulses(0);

    - topic: "valvula/02/valor"
      then:
        - lambda: |-
            auto level = strtof(x.c_str(), nullptr) * 0.8 / 100.0 + 0.2;
            id(val_02).set_level(level);
    - topic: "contador/02/reset"
      then:
        - lambda: |-
            id(volumen_02) = 0;
            id(volumen_02_anterior) = 0;
            id(contador_02).set_total_pulses(0);

    - topic: "valvula/03/valor"
      then:
        - lambda: |-
            auto level = strtof(x.c_str(), nullptr) * 0.8 / 100.0 + 0.2;
            id(val_03).set_level(level);
    - topic: "valvula/04/valor"
      then:
        - lambda: |-
            auto level = strtof(x.c_str(), nullptr) * 0.8 / 100.0 + 0.2;
            id(val_04).set_level(level);

interval:
  - interval: 2s
    then:
      - mqtt.publish:
          topic: "contador/01/volumen"
          payload: !lambda |-
            return std::to_string(id(volumen_01)).c_str();
      - mqtt.publish:
          topic: "contador/02/volumen"
          payload: !lambda |-
            return std::to_string(id(volumen_02)).c_str();
